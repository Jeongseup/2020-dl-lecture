{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"GAN-DNN-2","provenance":[{"file_id":"1DMLosBO-uIyCB61UnGr1fmhnvgMgfASj","timestamp":1579729367413}],"collapsed_sections":[],"authorship_tag":"ABX9TyNKym0hL3yiz/FDcgUWB99N"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"id":"TXZd-Ccm-0GP","colab_type":"code","outputId":"62d71ac3-ff09-4e8f-e630-d37aa9fc6ef3","executionInfo":{"status":"ok","timestamp":1579730160482,"user_tz":-540,"elapsed":30382,"user":{"displayName":"백지훈","photoUrl":"","userId":"00289033686136035236"}},"colab":{"base_uri":"https://localhost:8080/","height":55}},"source":["%tensorflow_version 2.x\n","import tensorflow as tf\n","\n","print(tf.__version__)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["TensorFlow 2.x selected.\n","2.1.0-rc1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rsAhqSq6_IJA","colab_type":"code","colab":{}},"source":["import os\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from tqdm import tqdm\n","\n","\n","from tensorflow.keras.layers import Input\n","from tensorflow.keras.models import Model, Sequential\n","from tensorflow.keras.layers import Dense, Dropout\n","from tensorflow.keras.layers import LeakyReLU\n","from tensorflow.keras.datasets import mnist\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras import initializers"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FxWGUa-D_Yns","colab_type":"code","colab":{}},"source":["np.random.seed(10)\n","random_dim = 100"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BYKn2Iu5_z-c","colab_type":"code","colab":{}},"source":["def load_minst_data():\n","    # 데이터를 로드합니다.\n","    (x_train, y_train), (x_test, y_test) = mnist.load_data()\n","\n","    # 데이터를 -1 ~ 1 사이 값으로 normalize 합니다.\n","    x_train = (x_train.astype(np.float32) - 127.5)/127.5\n","\n","    # x_train 의 shape 를 (60000, 28, 28) 에서 (60000, 784) 로 바꿉니다.\n","    # 따라서 우리는 한 row 당 784 columns 을 가지게 됩니다.\n","    x_train = x_train.reshape(60000, 784)\n","    return (x_train, y_train, x_test, y_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TpWFZQ-S_4o8","colab_type":"code","colab":{}},"source":["# Adam Optimizer를 사용합니다.\n","def get_optimizer():\n","    return Adam(lr=0.0002, beta_1=0.5)\n","\n","# Generator 만들기\n","def get_generator(optimizer):\n","    generator = Sequential()\n","    generator.add(Dense(256, input_dim=random_dim, kernel_initializer=initializers.RandomNormal(stddev=0.02)))\n","    generator.add(LeakyReLU(0.2))\n","\n","    generator.add(Dense(512))\n","    generator.add(LeakyReLU(0.2))\n","\n","    generator.add(Dense(1024))\n","    generator.add(LeakyReLU(0.2))\n","\n","    generator.add(Dense(784, activation='tanh'))\n","    generator.compile(loss='binary_crossentropy', optimizer=optimizer)\n","    return generator\n","\n","# Discriminator 만들기\n","def get_discriminator(optimizer):\n","    discriminator = Sequential()\n","    discriminator.add(Dense(1024, input_dim=784, kernel_initializer=initializers.RandomNormal(stddev=0.02)))\n","    discriminator.add(LeakyReLU(0.2))\n","    discriminator.add(Dropout(0.3))\n","\n","    discriminator.add(Dense(512))\n","    discriminator.add(LeakyReLU(0.2))\n","    discriminator.add(Dropout(0.3))\n","\n","    discriminator.add(Dense(256))\n","    discriminator.add(LeakyReLU(0.2))\n","    discriminator.add(Dropout(0.3))\n","\n","    discriminator.add(Dense(1, activation='sigmoid'))\n","    discriminator.compile(loss='binary_crossentropy', optimizer=optimizer)\n","    return discriminator"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XtYmxXZD_8NU","colab_type":"code","colab":{}},"source":["def get_gan_network(discriminator, random_dim, generator, optimizer):\n","    # 우리는 Generator와 Discriminator를 동시에 학습시키고 싶을 때 trainable을 False로 설정합니다.\n","    discriminator.trainable = False\n","\n","    # GAN 입력 (노이즈)은 위에서 100 차원으로 설정했습니다.\n","    gan_input = Input(shape=(random_dim,))\n","\n","    # Generator의 결과는 이미지 입니다.\n","    x = generator(gan_input)\n","\n","    # Discriminator의 결과는 이미지가 진짜인지 가짜인지에 대한 확률입니다.\n","    gan_output = discriminator(x)\n","\n","    gan = Model(inputs=gan_input, outputs=gan_output)\n","    gan.compile(loss='binary_crossentropy', optimizer=optimizer)\n","    return gan"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mNPaNCnU_-os","colab_type":"code","colab":{}},"source":["# 생성된 MNIST 이미지를 보여주는 함수\n","def plot_generated_images(epoch, generator, examples=100, dim=(10, 10), figsize=(10, 10)):\n","    noise = np.random.normal(0, 1, size=[examples, random_dim])\n","    generated_images = generator.predict(noise)\n","    generated_images = generated_images.reshape(examples, 28, 28)\n","\n","    plt.figure(figsize=figsize)\n","    for i in range(generated_images.shape[0]):\n","        plt.subplot(dim[0], dim[1], i+1)\n","        plt.imshow(generated_images[i], interpolation='nearest', cmap='gray_r')\n","        plt.axis('off')\n","    plt.tight_layout()\n","    plt.show()\n","    #plt.savefig('gan_generated_image_epoch_%d.png' % epoch)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"D1_bJlg5P9fe","colab_type":"code","colab":{}},"source":["# 우리의 GAN 네트워크를 만듭니다.\n","adam = get_optimizer()\n","generator = get_generator(adam)\n","discriminator = get_discriminator(adam)\n","gan = get_gan_network(discriminator, random_dim, generator, adam)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"NqLSfxP6ABO7","colab_type":"code","outputId":"288b4570-4172-47ac-a0da-d88a9d945521","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1-RBvNzxPf9Aw50l0ld40ztmHMrmSVeuw"},"executionInfo":{"status":"ok","timestamp":1579730907113,"user_tz":-540,"elapsed":696489,"user":{"displayName":"백지훈","photoUrl":"","userId":"00289033686136035236"}}},"source":["def train(epochs=1, batch_size=128):\n","    # train 데이터와 test 데이터를 가져옵니다.\n","    x_train, y_train, x_test, y_test = load_minst_data()\n","\n","    # train 데이터를 128 사이즈의 batch 로 나눕니다.\n","    batch_count = x_train.shape[0] // batch_size\n","\n","\n","    for e in tqdm(range(1, epochs+1)):        \n","      # 입력으로 사용할 random 노이즈와 이미지를 가져옵니다.\n","      noise = np.random.normal(0, 1, size=[batch_size, random_dim])\n","\n","      image_batch = x_train[np.random.randint(0, x_train.shape[0], size=batch_size)]\n","\n","      # MNIST 이미지를 생성합니다.\n","      generated_images = generator.predict(noise)\n","      X = np.concatenate([image_batch, generated_images])\n","\n","      y_dis = np.zeros(2*batch_size)\n","      y_dis[:batch_size] = 0.9\n","\n","      # Discriminator를 학습시킵니다.\n","      discriminator.trainable = True\n","      discriminator.train_on_batch(X, y_dis)\n","\n","      # Generator를 학습시킵니다.\n","      noise = np.random.normal(0, 1, size=[batch_size, random_dim])\n","      y_gen = np.ones(batch_size)\n","      discriminator.trainable = False\n","      gan.train_on_batch(noise, y_gen)\n","\n","      if e == 1 or e % 200 == 0:\n","        plot_generated_images(e, generator)\n","\n","if __name__ == '__main__':\n","    train(4000, 128)"],"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"phQjQRybPyY7","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QxACG9E8ADv7","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}